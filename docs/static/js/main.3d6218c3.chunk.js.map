{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","data/giphy.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","categories","setCategories","timer","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","console","log","trim","length","type","name","id","placeholder","onKeyUp","elm","target","value","clearTimeout","setTimeout","autoComplete","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","toLowerCase","replace","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAqCeA,EAlCK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAC7BC,EAAQ,EADyC,EAEfC,mBAAS,IAFM,mBAE7CC,EAF6C,KAEjCC,EAFiC,KAoBrD,OACE,uBAAMC,UAAU,YAAYC,SAfT,SAACC,GACpBA,EAAEC,iBACFC,QAAQC,IAAI,2BACZP,EAAWQ,OAAOC,OAAS,EAAIZ,EAAc,CAACG,GAAF,mBAAiBJ,KAAeK,EAAc,KAY1F,UACE,uDAAwBD,KACxB,uBAAOU,KAAK,OAAOC,KAAK,SAASC,GAAG,aAAaC,YAAY,yBAAsBC,QATnE,SAACV,GACnB,IAAIW,EAAMX,EAAEY,OAAOC,MACnBC,aAAapB,GACbA,EAAQqB,YAAW,WAAQlB,EAAcc,KAAQ,MAM4DK,aAAa,Y,+BCxBjHC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,uDCFR,mCDEQ,cAEsDC,UAAUH,GAFhE,sBAGAI,MAAMF,GAHN,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLpB,GAAIoB,EAAIpB,GACRqB,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAGtClB,QAAQC,IAAIuB,GAbS,kBAcdA,GAdc,4CAAH,sDEULM,EAVK,SAAC,GAAsB,IAArBxB,EAAoB,EAApBA,GAAIY,EAAgB,EAAhBA,IAAKS,EAAW,EAAXA,MAG7B,OACE,mCACE,qBAAgBI,IAAMb,EAAMc,IAAML,GAAvBrB,MC2BF2B,EA9BC,SAAC,GAAgB,IAAfjB,EAAc,EAAdA,SAAc,ECDJ,SAACA,GAAc,IAAD,EAEdvB,mBAAS,CACjC8B,KAAM,GACNW,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAU,WACRtB,EAAQC,GAAUsB,MAAK,SAACd,GACtBX,YAAW,WACTuB,EAAS,CACPb,KAAMC,EACNU,SAAS,MAEV,UAEJ,CAAClB,IAGGmB,EDhBmBI,CAAavB,GAA/BO,EAFsB,EAEtBA,KAAMW,EAFgB,EAEhBA,QAMd,OACE,sBAAKtC,UAAU,iBAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,mCAAOoB,EAAP,SAEAkB,GAAW,wBAAQtC,UAAU,mCAAlB,yBACb,qBAAKA,UAAU,kBAAf,SAEE2B,EAAKE,KAAI,SAACC,GAAD,OACP,sBAAK9B,UAAS,UAAK8B,EAAIC,MAAMa,cAAcC,QAAQ,OAAQ,KAA7C,gDAAd,UACE,cAAC,EAAD,eAA+Bf,GAAbA,EAAIpB,IACtB,qBAAKV,UAAU,kBAAf,SACE,+BAAQ8B,EAAIC,sBECXe,MArBf,WAAyB,IAAD,EAEgBjD,mBAAS,CAAC,gBAF1B,mBAEdH,EAFc,KAEFC,EAFE,KAKtB,OACE,sBAAKK,UAAU,UAAf,UACE,8CAEA,cAAC,EAAD,CAAaN,WAAaA,EAAaC,cAAgBA,IAInDD,EAAWmC,KAAI,SAACT,GACd,OAAO,cAAC,EAAD,CAAwBA,SAAWA,GAArBA,UCZjC2B,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.3d6218c3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ categories, setCategories }) => {\n  let timer = 0;\n  const [ inputValue, setInputValue ] = useState('');\n\n  // const handleInputChange = (e) =>  { setInputValue(e); }\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('Submit ha sido detenido');\n    inputValue.trim().length > 2 ? setCategories([inputValue, ...categories]) : setInputValue('');\n    // Si no se tuvieran las categorias, podría llamarse el cats que viene en el callbak de SetCategories\n    // inputValue.trim().length > 2 ? setCategories(cats => [...cats, inputValue]) : setInputValue('');\n  };\n  \n  const handleKeyUp = (e) => {\n    let elm = e.target.value;\n    clearTimeout(timer); \n    timer = setTimeout(() => { setInputValue(elm) }, 300);\n  }\n\n  return (\n    <form className=\"searchBox\" onSubmit={ handleSubmit }>\n      <span>Tu búsqueda es: { inputValue }</span>\n      <input type=\"text\" name=\"search\" id=\"searchItem\" placeholder=\"Ingresa tu búsqueda\" onKeyUp={ handleKeyUp } autoComplete=\"off\" />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n  categories: PropTypes.array.isRequired,\n}\n\n\nexport default AddCategory\n","import apiKey from '../data/giphy';\n\nexport const getGifs = async (category) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=${ apiKey }&q=${ encodeURI(category) }&limit=10`;\n  const resp   = await fetch(url);\n  const { data } = await resp.json();\n  \n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    }\n  });\n  console.log(gifs);\n  return gifs;\n}\n","const apiKey = \"oOLjcgRwQ07eJZFYI3dMKQ3quhERcQLE\";\n\nexport default apiKey;\n","import React from 'react'\n\nconst GifGridItem = ({id, url, title}) => {\n  // console.log(img)\n\n  return (\n    <>\n      <img key={ id } src={ url } alt={ title } />\n    </>\n  )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n\n  const { data, loading } = useFetchGifs(category);\n\n  // Este hook sirve para correr una petición solamente una vez cuando se carga\n  // hasta que hay una actualización en el componente que lo ejecuta, que en este caso sería el padre\n  // que en este caso estaría el AddCategories, en el cual, al crear un componente se ejecutaría \"por primera vez\".\n\n  return (\n    <div className=\"categoriesList\">\n      <div className=\"categoryTitle\">\n        <h3> { category } </h3>\n      </div>\n      { loading && <strong className=\"animate__animated animate__flash\">Cargando...</strong> }\n      <div className=\"categoryContent\">\n      { \n        data.map((img) => (\n          <div className={`${img.title.toLowerCase().replace(/\\s/gi, \"-\")}-item card animate__animated animate__fadeIn`}>\n            <GifGridItem key={img.id} { ...img } />\n            <div className=\"titleParragraph\">\n              <span>{ img.title }</span>\n            </div>\n          </div>\n        ))\n      }\n      </div>\n    </div>\n  )\n}\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  \n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(( ) => {\n    getGifs(category).then((gifs) => {\n      setTimeout(() => {\n        setstate({\n          data: gifs,\n          loading: false,\n        })        \n      }, 1000);\n    })    \n  }, [category])\n  \n\n  return state; // {data: [], loading: true}\n}\n","import React, { useState } from 'react';\nimport AddCategory from './AddCategory';\nimport GifGrid from './GifGrid';\n\nfunction GifExpertApp() {\n\n  const [ categories, setCategories ] = useState(['Dragon Ball'])\n  // const addElement = () => setCategories([...categories, 'Caballeros del Zodiaco']);\n\n  return (\n    <div className=\"content\">\n      <h2>GifExpertApp</h2>\n      {/* <button onClick={ addElement }>Agregar</button> */}\n      <AddCategory categories={ categories } setCategories= {setCategories} />\n\n\n        { \n          categories.map((category) => {\n            return <GifGrid key={category} category={ category } />\n          }) \n        }\n    </div>\n  )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp';\n\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );\n"],"sourceRoot":""}